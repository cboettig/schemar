% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PropertyValueSpecification.R
\name{PropertyValueSpecification}
\alias{PropertyValueSpecification}
\title{PropertyValueSpecification}
\usage{
PropertyValueSpecification(id = NULL, valueRequired = NULL,
  valuePattern = NULL, valueName = NULL, valueMinLength = NULL,
  valueMaxLength = NULL, stepValue = NULL, readonlyValue = NULL,
  multipleValues = NULL, minValue = NULL, maxValue = NULL,
  defaultValue = NULL, url = NULL, sameAs = NULL,
  potentialAction = NULL, name = NULL, mainEntityOfPage = NULL,
  image = NULL, identifier = NULL, disambiguatingDescription = NULL,
  description = NULL, alternateName = NULL, additionalType = NULL)
}
\arguments{
\item{id}{identifier for the object (URI)}

\item{valueRequired}{(Boolean type.) Whether the property must be filled in to complete the action.  Default is false.}

\item{valuePattern}{(Text type.) Specifies a regular expression for testing literal values according to the HTML spec.}

\item{valueName}{(Text type.) Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name.}

\item{valueMinLength}{(Number type.) Specifies the minimum allowed range for number of characters in a literal value.}

\item{valueMaxLength}{(Number type.) Specifies the allowed range for number of characters in a literal value.}

\item{stepValue}{(Number type.) The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification.}

\item{readonlyValue}{(Boolean type.) Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a "hidden" input in an HTML form.}

\item{multipleValues}{(Boolean type.) Whether multiple values are allowed for the property.  Default is false.}

\item{minValue}{(Number or Number or Number or Number type.) The lower value of some characteristic or property.}

\item{maxValue}{(Number or Number or Number or Number type.) The upper value of some characteristic or property.}

\item{defaultValue}{(Thing or Text type.) The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values.}

\item{url}{(URL type.) URL of the item.}

\item{sameAs}{(URL type.) URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.}

\item{potentialAction}{(Action type.) Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.}

\item{name}{(Text type.) The name of the item.}

\item{mainEntityOfPage}{(URL or CreativeWork type.) Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.}

\item{image}{(URL or ImageObject type.) An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].}

\item{identifier}{(URL or Text or PropertyValue type.) The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.}

\item{disambiguatingDescription}{(Text type.) A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.}

\item{description}{(Text type.) A description of the item.}

\item{alternateName}{(Text type.) An alias for the item.}

\item{additionalType}{(URL type.) An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.}
}
\value{
a list object corresponding to a schema:PropertyValueSpecification
}
\description{
A Property value specification.
}
